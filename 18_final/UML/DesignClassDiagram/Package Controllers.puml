@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

package controllers {

class MatadorMain {

    {static}+main(args : String[]) : void

}

class GameController <<Singleton>>{
    -players: Player[]
    -playerNames: Player[]
    -totalPlayers: int
    -currentPlayerNum: int
    -playerArrayNum: int
    -board: Board
    -diceCup: DiceCup
    -viewController: ViewController
    {static}-single_instance: GameController

    +initializeGame() : void
    -setupPlayers() : void
    +switchTurn(extraTurn : boolean) : void
    +gameLoop() : void
    -checkForWinner() : boolean
    -determineWinner() : int
    -endGame() : void
    -takeTurn() : void
    -putPlayerInJailIfSameDice3TimesInRow (int playerOnField) : boolean
    -releaseFromJail() : void
    +calculateAssets(playerNum : int) : int
    -calculateLiquidAssets(playerNum : int) : int
    +sellAssets(name : String, needToPay : int, creditorPlayerNum : int) : void
    -goBankrupt(bankruptPlayerNum : int, assetvalue : int, needToPay : int, creditorPlayerNum : int) : void

}

'class GameSetupController {
'
'}

class ViewController <<Singleton>>{
    -guiCars: GUI_Car[]
    -guiPlayers: GUI_Player[]
    -gui: GUI
    {static}-single_instance: ViewController
    -numOfFields: int
    -guiFields: GUI_Field[]
    -guiStreets: GUI_Street[]
    -takeTurnGUIMessages: String[]
    -setupGameGUIMessages: String[]

    +setupGUIBoard() : void
    +putPlayersOnBoard() : void
    +removeGUICar(playerNum : int, playerOnFieldNum : int) : void
    +moveGUICar(moveFrom : int, moveTo : int, currentPlayerNum : int) : void
    -currentPlayerNum() : int
    +updateGUIDice(die1 : int, die2 : int) : void
    +updateGUIBalance() : void
    +formatFieldBorder(fieldArrayNum : int) : void

}

class ViewController_GUIMessages <<Singleton>> {
    -gui: GUI
    {static}-single_instance: ViewController_GUIMessages
    -TOTALNUMOFFIELDS: int
    -guiFields: GUI_Field[]
    -guiStreets: GUI_Street[]
    -TAKETURNGUIMESSAGES: String[]

    {static}+getInstance() : ViewController_GUIMessages
    +rollMessage() : void
    +sameFaceValueMessage() : void
    +startBonusMessage() : void
    +goToJailMessage() : void
    +releaseFromJailMessageHasCard() : boolean
    +releaseFromJailMessagePayMoney() : void
    +showTakeTurnMessageWithPlayerName(...) : void
    +drawChanceCardMessage(text : String) : void
    +showMessageAndGetBooleanUserInput(int, int, int, String, String, int) : boolean
    +getBuyOrSellBuildingsUserInput(...) : String
    +whereToBuildUserInput(colors : String[]) : String
    +whereToUnBuildUserInput(colors : String[]) : String
    +numberHousesToBuildUserInput(fieldName : String, housePrice : int, numOfHousesOnField : int) : int : int
    +numberHousesToSellUserInput(fieldName : String, housePrice : int, numOnHousesOnField : int) : int
    +buildHotelUserInput(fieldName : String, housePrice : int) : boolean
    +sellHotelUserInput(fieldName : String, housePrice : int) : boolean

}

class ViewController_GameSetup <<Singleton>>{
    -setupGameGUIMessages: String[]
    {static}-single_instance: ViewController_GameSetup

    {static}+getInstance() : ViewController_GameSetup
    +setupGUIBoard(guiFields : GUI_Field[], guiStreets : GUI_Street[]) : GUI
    +showGameRules() : void
    +getPlayerNames(gui : GUI) : String[]
    +setupGUICars(int players : int, guiCars : GUI_Car[]) : void
}


}

package models #DDDDDD {
() Player
() DiceCup
() Board
() GameSettings

}

package services #DDDDDD {
() GUIBoardCreator
}

MatadorMain ..> GameController
ViewController <.. GameController
ViewController_GameSetup *---- GUIBoardCreator
ViewController ..> ViewController_GameSetup
GameController *--- Player
GameController *--- DiceCup
GameController *--- Board
GameController ---> GameSettings


@enduml