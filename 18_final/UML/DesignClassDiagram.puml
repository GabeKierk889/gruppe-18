@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

package services {

class FileImporter {
    -reader: BufferedReader

    +readAllLinesInFile(filename : String) : String[]
    -getLinesInFile(filename : String) : int
}
class FieldsDataReader {
    -rawStringsData: String[]
    -fieldNamesArray: String[]
    -fieldTypeArray: String[]
    -streetColorsArray: String[]
    -fieldPriceArray: int[]
    -housePriceArray: int[]
    -rentArrayArray: int[][]
    -rentLevels: int

    -readData() : void
}
class FieldsCreator {
    +createFields() : Field[]
}
class ChanceCardsDataReader {
    -rawStringsData : String[]
    -numArray: int[][]
    -fieldNameWithinText: String[]

    -readData() : void
    -readFileNames : void

}
class ChanceCardsCreator {
    +createChanceCardsDeck() : ChanceCard[]
}

class GUIBoardCreator {
    -guiFields: GUI_Field[]
    -guiStreets: GUI_Street[]
    -board: Board
    -fieldsDataReader: FieldsDataReader
    -fieldPrice: int[]
    -fileImporter: FileImporter
    -takeTurnMessages: String[]
    -fieldDescriptions: String[]

    -setUpAndFormatGUIBoard() : void
    -formatStreets() : void
    -setupBreweryFields() : void
    -formatShippingFields() : void
    -setupSTART() : void
    -setupRefuge : void
    -setupTaxFields : void
    -setupJailFields : void
}

}

package controllers {

class MatadorMain {

    {static}+main(args : String[]) : void

}

class GameController <<Singleton>>{
    -players: Player[]
    -playerNames: Player[]
    -totalPlayers: int
    -currentPlayerNum: int
    -playerArrayNum: int
    -board: Board
    -diceCup: DiceCup
    -viewController: ViewController
    {static}-single_instance: GameController

    +initializeGame() : void
    -setupPlayers() : void
    +switchTurn(extraTurn : boolean) : void
    +gameLoop() : void
    -checkForWinner() : boolean
    -determineWinner() : int
    -takeTurn() : void
    -releaseFromJail() : void
    +calculateAssets(playerNum : int) : int
    -calculateLiquidAssets(playerNum : int) : int
    +sellAssets(name : String, needToPay : int, creditorPlayerNum : int) : void
    -goBankrupt(bankruptPlayerNum : int, assetvalue : int, needToPay : int, creditorPlayerNum : int) : void

}

'class GameSetupController {
'
'}

class ViewController <<Singleton>>{
    -guiCars: GUI_Car[]
    -guiPlayers: GUI_Player[]
    -gui: GUI
    {static}-single_instance: ViewController
    -numOfFields: int
    -guiFields: GUI_Field[]
    -guiStreets: GUI_Street[]
    -takeTurnGUIMessages: String[]
    -setupGameGUIMessages: String[]

    +setupGUIBoard() : void
    +putPlayersOnBoard() : void
    -setupGUICars() : void
    -setupGUIPlayers() : void
    +removeGUICar(playerNum : int, playerOnFieldNum : int) : void
    +moveGUICar(moveFrom : int, moveTo : int, currentPlayerNum : int) : void
    +rollMessage() : void
    -currentPlayerNum() : int
    +updateGUIDice(die1 : int, die2 : int) : void
    +updateGUIBalance() : void
    +sameFaceValueMessage() : void
    +startBonusMessage() : void
    +goToJailMessage() : void
    +releaseFromJailMessageHasCard() : boolean
    +releaseFromJailMessagePayMoney() : void
    +clickRulesMessage() : void
    +rulesMessage() : void
    +startGameMessage() : void
    +gameRulesMessage() : void
    +showTakeTurnMessageWithPlayerName(txtFileLineArrayNum : int, stringInText : String, stringInText2 : String, stringInText3 : String) : void
    +showTakeTurnMessageWithPlayerName(customString : String, txtFileLineArrayNum : int) : void
    +showTakeTurnMessageWithPlayerName(txtFileLineArrayNum : int, txtFileLineArrayNum2 : int, txtFileLineArrayNum3 : int, stringInText : String, stringInText2 : String, stringInText3 : String) : void
    +showTakeTurnMessageWithPlayerName(customString : String, txtFileLineArrayNum : int, txtFileLineArrayNum2 : int, txtFileLineArrayNum3 : int, stringInText : String, stringInText2 : String, stringInText3 : String) : void
    +showMessageAndTakeBooleanUserInput(txtFileLineQuestion : int, txtFileLineTrueButton : int, txtFileLineFalseButton : int) : boolean
    +showMessageAndTakeBooleanUserInput(txtFileLineQuestion : int, txtFileLineTrueButton : int, txtFileLineFalseButton : int, stringInText : String, stringInText2 : String) : boolean
    +drawChanceCardMessage(text : String) : void
    +formatFieldBorder(fieldArrayNum : int) : void

}

}

package models {

class GameSettings {
    {static}+MINNUMOFPLAYERS: int
    {static}+MAXNUMOFPLAYERS: int
    {static}+STARTINGBALANCE: int
    {static}+STARTBONUS: int
    {static}+JAILFEE: int
    {static}+STATE_TAX_AMOUNT: int
    {static}+INCOME_TAX_AMOUNT: int
    {static}+INCOME_TAX_RATE: double
    {static}+MORTGAGE_INTEREST_MULTIPLIER: double
    {static}+HOUSE_RESELL_VALUE_MULTIPLIER: double
    {static}+MORTGAGE_INTEREST_ROUNDING: int
    {static}+HOUSE_RESELL_VALUE_MULTIPLIER: double
    {static}+GOTOJAIL_IF_THROW_SAME_DICE_X_TIMES: int

}

class Player {
    -NAME: String
    -isBankrupt: Boolean
    -onField: int
    -ACCOUNT: Account
    -isInJail: Boolean
    -jailCard1: ChanceCard
    -jailCard2: ChanceCard
    -throwTwoOfSameDiceInARow: int

    +moveToField(fieldArrayNum : int) : void
    +moveSteps(stepsToMove : int) : int
    +hasAJailCard() : Boolean
    +giveJailCard(jailCard : ChanceCard) : void
    +returnJailCard() : ChanceCard
    +collectStartBonus(int diceThrow) : void
}

class Board {
    -fields: Field[]

    +ownsAllFieldsOfSameType(fieldArrayNum : int) : boolean
    +updateRentForAllFieldsOfSameType(fieldArrayNum : int) : void
    +numOfShippingFieldsOwned(playerNum : int) : int
    +numBuildingsOwnedByCurrentPlayer() : int[]
    +calculateAssetValueOfBuildingsOwned(playerNum : int) : int
    +calculateValueOfFieldsOwned(playerNum : int) : int
    +removeAllBuildingsOwned(playerNum : int) : void
    +calculateAvailableMortgageValueOfFieldsOwned(playerNum : int) : int
    bankruptcyTransferAllFieldAssets(oldOwnerPlayerNum : int, newOwnerPlayerNum : int) : void
    +buildHouse() : void
    +buildHotel() : void
    +sellHouse() : void
    +sellHotel() : void
}

class Field {
    #FIELDNAME: String

    +landOnField(currentPlayerObject : Player) : void
}

class Account {
    -NAME: String
    -balance: int

    +depositMoney(deposit : int) : void
    +withdrawMoney(withdrawal : int) : void
    +withdrawMoney(withdrawal : int, creditorPlayerNum : int) : void
    +transferMoney(amount : int, recipientPlayerNum : int) : void
}

class DiceCup {
    -die1: Die
    -die2: Die

    +roll() : void
    +isSameFaceValue() : boolean
}

class Die {
    -facevalue: int
    -NUMOFSIDES: int

    +roll() : void
}

package ChanceCardSubType {

note as note

All classes in this package inherits from the ChanceCard class

end note

class JailReleaseCard
class MoveToFieldCard
class MoveXFieldsBackwardsCard
class MoveXFieldsForwardCard
class PayMoneyCard
class PayMoneyForBuildingsCard
class RecieveFromEachPlayerCard
class RecieveMatadorStipendCard
class RecieveMoneyCard

}

abstract class ChanceCard {
    #TEXT: String
    +getChanceCardText() : String
    {abstract}+effect(currentPlayerObject : Player) : void
}

abstract class OwnableField {
        #ownerNum: int
        #PRICE: int
        #currentRent: int
        #RENTARRAY: int[]
        #isMortgaged: boolean
        #MORTGAGEVALUE: int
        -MORTGAGE_PRICE_RATIO: double

        +buyField(currentPlayerObject : Player) : void
        -buyFieldTransaction(currentPlayerNum : int, currentplayerobject : Player, purchasePrice : int) : void
        +auctionField() : void
        {abstract}+updateRent() : void
        +mortgageField() : void
        -unMortgageField(currentplayerobject : Player) : void
        +auctionField() : void
        +tradeField() : void
        -sendGUIPlayerMessage(purchasePrice : int) : void
}

class StreetField {
    -numOfHouses: int
    -hasHotel: boolean
    -HOUSEPRICE: int
    -STREETCOLOR: String

}

class BreweryField {

}

class ShippingField {

}

class ChanceField {
    {static}-chanceCards: ChanceCard[]
    {static}-currentCard: ChanceCard

    {static}+drawChanceCard() : ChanceCard
    {static}+shuffleChanceCards() : void
    {static}+putBackChanceCard(jailCard : ChanceCard) : void
    {static}-putAllNullCardsInBottom() : void
}

class JailField {

}

abstract class TaxField {
    #FIXEDTAX: int

    {abstract}+calculateTax(currentPlayerObject : Player) : int
    -PayTax(currentPlayerObject : Player) : void
}

class StateTaxField {

}

class IncomeTaxField {

}

}

MatadorMain *-- GameController
FieldsDataReader --> FileImporter
ChanceCardsDataReader --> FileImporter
FieldsCreator --> FieldsDataReader
ChanceCardsCreator --> ChanceCardsDataReader
ChanceField o- ChanceCard
ChanceField -> ChanceCardsCreator
ChanceCard <|-- ChanceCardSubType
ViewController --> GUIBoardCreator
Board --> FieldsCreator
ViewController --* GameController
GameController --> GameSettings
GameController *--- Board
GameController *--- DiceCup
GameController *--- Player
Player *-- Account
Board *-- "40" Field
OwnableField <|-- StreetField
Field <|-- ChanceField
Field <|-- JailField
DiceCup *-- "2" Die
Field <|-- OwnableField
OwnableField <|-- BreweryField
OwnableField <|-- ShippingField
Field <|-- TaxField
TaxField <|-- StateTaxField
TaxField <|-- IncomeTaxField
'ChanceCard <|--


@enduml